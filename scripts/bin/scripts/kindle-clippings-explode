#!/usr/bin/env python2.7

# Script to explode Kindle "My Clippings.txt" into several files, one per book.
#
# usage:
# kindle-clippings-explode "/path/to/My Clippings.txt" /path/to/output/directory
# kindle-clippings-explode auto /path/to/output/directory
# kindle-clippings-explode
# (default: try to find My Clippings.txt, write to ./kindle_clippings)

import os
import re
import sys
import codecs
import subprocess as sub
from pprint import pprint

# return mount points of all mounted filesystems whose devices start with '/'
#
# (this filters most special mountpoints such as proc, etc)
#
# assume first field  in df(1) is device, and last field is mount point
def list_mountpoints():
    p = sub.Popen(['df'], 
            stdout=sub.PIPE,
            env={'POSIXLY_CORRECT': 'true'}, 
            )
    out = p.communicate()[0]

    res=[]
    for line in out.split("\n"):
        if len(line) > 0 and line[0] == '/':
            res.append(line.strip().split()[-1])
    return res

def has_myclippings(mountpoint):
    return os.path.isfile(mountpoint + '/documents/My Clippings.txt')

def find_myclippings():
    mps = list_mountpoints()
    for mp in mps:
        if re.search('/kindle', mp, re.IGNORECASE) and has_myclippings(mp):
            return mp + '/documents/My Clippings.txt'
    for mp in mps:
        if has_myclippings(mp):
            return mp + '/documents/My Clippings.txt'
    return None

def rsub(old, new, string):
    l = string.rsplit(old, 1)
    return new.join(l)

def unixify_title(title):
    title = title.lower().strip()

    title = rsub(' (', '-', title)

    title = re.sub('\)$', '', title)
    title = re.sub(' ', '_', title)
    return title

def parse_myclippings(fpath):
    res={}
    with codecs.open(fpath, 'r', 'utf-8') as f:
        title=None
        highlight=None
        content=''

        for line in f.readlines():
            sline = line.strip()

            if re.match(u'^$', sline):
                continue
            elif re.match(u'^- Highlight', sline):
                highlight=sline
            elif re.match(u'^- Note', sline):
                highlight=sline
            elif re.match(u'^- Bookmark', sline):
                # ignore bookmarks retroactively
                title = None
                continue
            elif re.match(u'^==========', sline):
                if title:
                    # we're not skipping this one
                    if title not in res.keys():
                        res[title] = []
                    res[title].append((highlight, content))

                title=None
                highlight=None
                content=''

            # first content line is title
            elif not title:
                title = unixify_title(sline)
            # the others are content
            else:
                content += line
        return res

def write_clippings(clippings, outdir):
    if not os.path.isdir(outdir):
        os.makedirs(outdir)

    for title, clips in clippings.iteritems():
        with codecs.open('%s/%s.txt' % (outdir, title), 'w', 'utf-8') as f:
            print title
            for position, text in clips:
                f.write(position)
                f.write(u"\n")
                f.write(text.strip())
                f.write(u"\n")
                f.write(u"==========\n")

if len(sys.argv) > 1 and sys.argv[1] != 'auto':
    myclip_path = sys.argv[1]
    if not os.access(myclip_path, os.R_OK):
        sys.stderr.write("Error: cannot read file %s\n" % myclip_path)
        sys.exit(1)
else:
    myclip_path = find_myclippings()
    if not myclip_path:
        sys.stderr.write("Error: cannot find a 'My Clippings.txt' file in moounted filesystems\n")
        sys.exit(1)

if len(sys.argv) > 2:
    outdir = sys.argv[2]
else:
    outdir = 'kindle_clippings'

print 'Parsing ' + myclip_path

clippings = parse_myclippings(myclip_path)

print 'Writing files to ' + outdir

write_clippings(clippings, outdir)
# pprint(clippings)
